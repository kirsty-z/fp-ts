1. webgl api 是为这些函数对的运行来设置状态：设置一堆状态，然后调用 gl.drawArrays 和 gl.drawElements 在 gpu 上运行着色器
2. 着色器有四种方法能够接收数据：
   (1.属性，缓冲区，和顶点数组
   (2.Uniforms(执行着色器程序前设置的全局变量)
   (3.纹理（能够在着色器程序中随机访问的数组数据）
   (4.Varyings（是一种从着色器到片段着色器传递数据的方法）
3. webgl 只关注两件事：剪辑空间坐标（点着色器提供剪辑空间坐标）和颜色
4. 点着色器得工作是生成裁剪空间坐标；gl_Position 来设置该点在剪裁空间得坐标
5. 裁剪器需要获得的数据来源有三种方式：
   (1.属性（从缓冲区取数据）
      <1. 创建缓冲区：const buf = gl.createBuffer()
      <2. 把数据放入到缓冲区: gl.bindBuffer(gl.ARRAY_BUFFER,buf);gl.bufferData(gl.ARRAY_BUFFER,someData,gl.STATIC_DRAW)
      <3. 在着色器程序中查找属性的位置：const positionLocation = gl.getAttribLocation(someShaderProgram,"a_position")
      <4. 告诉 webgl 如何将数据从这些缓冲区中取出并放入属性中：gl.enableVertexAttribArray(positionLocation)
      var numComponents = 3; // (x, y, z)
      var type = gl.FLOAT;
      var normalize = false; // 保持值不变
      var offset = 0; // 从缓冲区的开头开始
      var stride = 0; //移动到下一个顶点多少字节
      // 0 = 使用 type 和 numComponents 使用正确的步幅
      gl.vertexAttribPointer(positionLoc, numComponents, type, false, stride, offset);

   (2.Uniforms（在单次绘制过程中，它的值对所有顶点都是一样的）
      <通过 uniform 为着色器添加偏移量

   (3.纹理（来自 pixels/texels 的数据）

6. 片段着色器的任务是给栅格化的像素提供颜色；片段着色器获取的数据的方式：(1.Uniforms (2.纹理 (3.Varyings

7. 过程
   （1.定义顶点着色器（vertexShaderSource），片段着色器（fragmentShaderSource）
   （2.创建两个着色器（createShader）
   （3.链接两个着色器成一个程序（createProgram）并调用它（linkProgram）
   （4.查找顶点数据放在哪里(a_position) 查找颜色(a_color) 查找矩阵（u_matrix） 。。。
   （5.创建缓冲区（createBuffer）绑定缓冲区（bindBuffer）
   （6.创建属性状态集合（createVertexArray） 绑定属性状态集合（bindVertexArray）
   （7.绑定数据 gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
   （8.启用属性（enableVertexAttribArray）
   （9.填入数据(gl.bufferData)
   （10.诉属性如何从 positionBuffer 中获取数据（size,type,normalize,stride,offset）(vertexAttribPointer)
   （11.从剪辑空间转换为像素(viewport)
   （12.清理 canvas（clearColor，clear）
   （13.使用程序（useProgram）
   （14.绑定属性/缓冲区集（bindVertexArray）
   （15.设置属性（primitiveType,offset,count）draw（drawArrays）

8. 属性
   (1. a_position:唯一输入属性；数据类型 vec2
   (2. u_resolution:uniforms 属性，为画布显示精度；通过 gl.uniformXXX 设置 uniform 的值
   (3. u_color:uniforms 属性，颜色值可以动态设置 uniform vec4 u_color;
9. a_position: 点的着色器，从缓冲区接收数据
    a_texCoord：用于将纹理坐标传递给片段着色器
    u_resolution: 用于传入画布的分辨率
    u_color: 颜色值可以动态设置 uniform4fv
    u_image: 用于将纹理图像传递给片段着色器 uniform1i
    u_translation: 移动到位置 uniform2fv
    u_rotation:旋转
    u_scale: 缩放 uniform2fv
    u_matrix:根据矩阵转换位置  uniformMatrix4fv
10. 数据类型
   (1. float, vec2, vec3, vec4, mat2, mat3, mat4, int, ivec2, ivec3, ivec4, uint, uvec2, uvec3, uvec4.
         gl.uniform1f (floatUniformLoc, v);                 // 对于浮动
         gl.uniform1fv(floatUniformLoc, [v]);               // 对于 float 或 float 数组
         gl.uniform2f (vec2UniformLoc,  v0, v1);            // 对于 vec2
         gl.uniform2fv(vec2UniformLoc,  [v0, v1]);          // 对于 vec2 或 vec2 数组
         gl.uniform3f (vec3UniformLoc,  v0, v1, v2);        // 对于 vec3
         gl.uniform3fv(vec3UniformLoc,  [v0, v1, v2]);      // 对于 vec3 或 vec3 数组
         gl.uniform4f (vec4UniformLoc,  v0, v1, v2, v4);    // 对于 vec4
         gl.uniform4fv(vec4UniformLoc,  [v0, v1, v2, v4]);  // 对于 vec4 或 vec4 数组

         gl.uniformMatrix2fv(mat2UniformLoc, false, [  4x element array ])  // 对于 mat2 或 mat2 数组
         gl.uniformMatrix3fv(mat3UniformLoc, false, [  9x element array ])  // 对于 mat3 或 mat3 数组
         gl.uniformMatrix4fv(mat4UniformLoc, false, [ 16x element array ])  // 对于 mat4 或 mat4 数组

         gl.uniform1i (intUniformLoc,   v);                 // 对于整数
         gl.uniform1iv(intUniformLoc, [v]);                 // 对于 int 或 int 数组
         gl.uniform2i (ivec2UniformLoc, v0, v1);            // 对于 ivec2
         gl.uniform2iv(ivec2UniformLoc, [v0, v1]);          // 对于 ivec2 或 ivec2 数组
         gl.uniform3i (ivec3UniformLoc, v0, v1, v2);        // 对于 ivec3
         gl.uniform3iv(ivec3UniformLoc, [v0, v1, v2]);      // 对于 ivec3 或 ivec3 数组
         gl.uniform4i (ivec4UniformLoc, v0, v1, v2, v4);    // 对于 ivec4
         gl.uniform4iv(ivec4UniformLoc, [v0, v1, v2, v4]);  // 对于 ivec4 或 ivec4 数组

         gl.uniform1i (sampler2DUniformLoc,   v);           // 对于 sampler2D（纹理）
         gl.uniform1iv(sampler2DUniformLoc, [v]);           // 对于 sampler2D 或 sampler2D 数组

         gl.uniform1i (samplerCubeUniformLoc,   v);         // 对于 samplerCube（纹理）
         gl.uniform1iv(samplerCubeUniformLoc, [v]);         // 对于 samplerCube 或 samplerCube 数组

11. 二维 m3  /2d/index
12. 三维 m4  /3d/index
13. 三维透视： 远近
14. 三维摄像机： xyz
      矩阵：
         Xx  Xy  Xz   <- x axis
         Yx  Yy  Yz   <- y axis
         Zx  Zy  Zz   <- z axis
         Tx  Ty  Tz   <- 相机位置

15. 纹理
   (1.创建纹理  gl.createTexture
   (2.使用纹理单元0  gl.activeTexture(gl.TEXTURE + 0)
   (3.绑定纹理 gl.bindTexture(gl.TEXTURE_2D,texture)绑定到纹理单元0的TEXTURE_2D绑定点
   (4.用1x1蓝色像素填充纹理:gl.texImage2D()

16.数据纹理
   格式             数据类型                  通道数/单像素字节数
   RGBA             UNSIGNED_BYTE            4
   RGB              UNSIGNED_BYTE            3
   RGBA             UNSIGNED_SHORT_4_4_4_4   2
   RGBA             UNSIGNED_SHORT_5_5_5_1   2
   RGB	           UNSIGNED_SHORT_5_6_5	3	2
   LUMINANCE_ALPHA  UNSIGNED_BYTE          	2
   LUMINANCE	     UNSIGNED_BYTE	         1
   ALPHA	           UNSIGNED_BYTE	         1

17. 纹理属性
   gl.generateMipmap：每个子图都是前一级的双线性插值， gl.generateMipmap 它根据原始图像创建所有的缩小级别
      NEAREST = 从最大的贴图中选择 1 个像素
      LINEAR = 从最大的贴图中选择 4 个像素然后混合
      NEAREST_MIPMAP_NEAREST = 选择最合适的贴图，然后从上面找到一个像素
      LINEAR_MIPMAP_NEAREST = 选择最合适的贴图，然后取出 4 个像素进行混合
      NEAREST_MIPMAP_LINEAR = 选择最合适的两个贴图，从每个上面选择 1 个像素然后混合
      LINEAR_MIPMAP_LINEAR = 选择最合适的两个贴图，从每个上选择 4 个像素然后混合
   gl.texParameter：设置筛选器
